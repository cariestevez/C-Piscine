1. Proof if the number of given arguments == 2 (arg1: ./name_of_the_program; arg2: "string"), else -> print error message, return 1.
If the first condition is fulfilled, we need to validate the input using a while loop that iterates counting the number of given characters to proof that the lenght of the string is 31. We also need to do a differenciation between odd and even positions (for this we do %2 of the 31 positions >note that we give the first position the value of 1, wich is an odd number to make it more visual). Example: 1%2=1 -> odd; 2%2=0 -> even; 31%2=1 -> odd. 					If at some point the condition is not true, we print an error message and return 1.
Now we iterate through the odd possitions checking if the value contained is a number. In that case, we convert these using the 'atoi' function (if odd -> int convertedchar; atoi(*str)).
With an intern loop we iterate again through this positions of the string using this new variable 'convertedchar' to proof if the numbers are in the range 1-4. Else -> we print an error message and return 1.
Then we need to check if in the even positions there are blanco spaces. If not we print an error message and return 1.
The next step is grouping the numbers 4x4 in our case.					val1 val2 val3 val4 -> collup; val5 val6 val7 val8 -> colldown; val9 val10 val11 val12 -> rowleft; val13 val14 val15 val16 -> rowright.
Then it's necessary to check if the confronted values are compatible (if it can be solved).	1-2; 1-3; 1-4; 2-2; 2-3. If not, we print an error message and return 1.

